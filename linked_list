#链表相关练习
class Node:
    def __init__(self,val):
        self.val=val
        self.next=None

class Linked_list:
    def __init__(self):
        self.head=None

    #添加元素
    def add(self,new_node):
        if self.head==None:
            self.head=Node(new_node)
            return self.head
        else:
            cur=self.head
            while cur.next != None:
                cur=cur.next
            cur.next=Node(new_node)
            return self.head
    def insert_at_first(self,data):
        cur=self.head
        if cur != None:
            head=Node(data)
            head.next=cur
            self.head=head
    #根据给定位置插入指定元素
    def insert_at_index(self,index,value):
        if self.head==None or self.get_length()==0:
            return
        elif index>self.get_length() or index<=0:
            print("invalid index")
            return
        elif index==1:
            self.insert_at_first(value)
        elif index==self.get_length()+1:
            self.add(value)
        else:
            cur=self.head
            pre=None
            new = Node(value)
            cursor=1
            while cur!=None:
                if index==cursor:
                    pre.next=new
                    new.next=cur
                    break
                else:
                    cursor += 1
                    pre = cur
                    cur = cur.next
    #删除指定位置的元素
    def delete_at_index(self,index):
        if self.head == None or self.get_length() == 0:
            return
        elif index>self.get_length() or index<=0:
            print("invalid index")
            return
        else:
            cur=self.head
            if index==1:
                self.head = cur.next
                return self.head
            else:
                pre = cur
                cur = cur.next
                count = 2
                while cur!=None:
                    if index == count:
                        pre.next=cur.next
                        break
                    else:
                        pre = cur
                        cur = cur.next
                        count += 1


    def IsEmpty(self):
        cur=self.head
        if cur==None:
            print("Empty linked list")
            return True
        else:
            return False
    def traverse(self):
        ptr=self.head
        while ptr != None:
            print(ptr.val)
            ptr=ptr.next

    def get_length(self):
        count=0
        if self.head==None:
            return count
        else:
            cur=self.head
            while cur:
                count += 1
                cur = cur.next
            return count
   
   #删除链表中重复的元素
   def del_duplicate(self):
        tmp=[]
        cur=self.head
        pre=None
        while cur != None:
            if cur.val in tmp:
                pre.next=cur.next
                cur=cur.next
            else:
                val = cur.val
                tmp.append(val)
                pre = cur
                cur = cur.next
    #倒转链表
    def reverse(self):
        pre=None
        cur=self.head

        while cur != None:
            next = cur.next
            cur.next=pre
            pre=cur
            cur=next
        self.head=pre
        
        
    #删除倒数第k个元素
        def del_kth_from_end(self,k):
        if k<=0 or k>self.get_length():
            print("k is invalid")
            return
        cur = self.head
        #将倒数k转为正数的index，则之后操作与delete相同
        index = self.get_length() - k + 1
        while cur != None:
            if index == 1:
                self.head = cur.next
                return self.head
            else:
                pre = cur
                cur = cur.next
                count = 2
                while cur != None:
                    if index == count:
                        pre.next = cur.next
                        break
                    else:
                        pre = cur
                        cur = cur.next
                        count += 1
    #输出链表倒数第k个元素
        def get_kth_from_end(self,k):
            if k<=0 or k>self.get_length():
                print("k is invalid")
                return
            tmp=[]
            cur=self.head
            while cur != None:
                tmp.append(cur.val)
                cur=cur.next
            return tmp[-k]
  
  #输入一个链表，反转链表后，输出新链表的表头
  class Solution:
    # 返回ListNode
    def ReverseList(self, pHead):
        # write code here
        if not pHead or not pHead.next:
            return pHead
        cur = pHead
        pre = None
        while cur:
            next= cur.next
            cur.next=pre
            pre=cur
            cur=next
        return pre 

#输入两个链表，找出它们的第一个公共结点。
#先得到两链表长度 假设为l,m 第一个比第二个长（l-m）,所以先行（l-m）节点，之后同步遍历直到找到相同节点
class Solution:
    def FindFirstCommonNode(self,pHead1, pHead2):
        # write code here
        len1=len2=0
        p1=pHead1
        while p1:
            len1+=1
            p1=p1.next
        p2=pHead2
        while p2:
            len2+=1
            p2=p2.next
        diff =len1 - len2
        while diff > 0:
            pHead1 = pHead1.next
            diff-= 1
        while diff < 0:
            pHead2 = pHead2.next
            diff+=1
        while pHead1 != pHead2:
            pHead1 = pHead1.next
            pHead2 = pHead2.next
        return pHead1
        
#链表中环的入口结点 
#给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。
#分析：通过两个指针，分别从链表的头节点出发，一个每次向后移动一步，另一个移动两步，两个指针移动速度不一样，如果存在环，那么两个指针一定会在环里相
#问题2：若存在环，如何找到环的入口点
#      解答：如图中所示，设链起点到环入口点间的距离为x，环入口点到问题1中fast与low重合点的距离为y，又设在fast与low重合时fast已绕环n周（n>0），且此时low移动总长度为s，则fast移动总长度为2s，环的长度为r。则
#       2s = s + nr             1
#       s = x + y               2
#     由1式得  s = nr                 
#      代入2式得
#      nr = x + y
#      x=nr - y                 3
# 现让一指针p1从链表起点处开始遍历，指针p2从encounter处开始遍历，且p1和p2移动步长均为1。则当p1移动x步即到达环的入口点，由3可知，此时p2也已移动x步即nr - y步。由于p2是从encounter处开始移动，故p2移动nr步是移回到了encounter处，再退y步则是到了环的入口点。也即，当p1移动x步第一次到达环的入口点时，p2也恰好到达了该入口点。
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def EntryNodeOfLoop(self, pHead):
        # write code here
        if pHead==None or pHead.next==None or pHead.next.next==None:
            return None
        fast = pHead.next.next
        slow = pHead.next
        while fast != slow :
            if fast.next==None or fast.next.next==None:
                return None
            slow = slow.next
            fast = fast.next.next
        fast=pHead
        while fast!= slow:
            fast=fast.next
            slow=slow.next
        return fast
