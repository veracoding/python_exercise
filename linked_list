#链表相关练习
class Node:
    def __init__(self,val):
        self.val=val
        self.next=None

class Linked_list:
    def __init__(self):
        self.head=None

    #添加元素
    def add(self,new_node):
        if self.head==None:
            self.head=Node(new_node)
            return self.head
        else:
            cur=self.head
            while cur.next != None:
                cur=cur.next
            cur.next=Node(new_node)
            return self.head
    def insert_at_first(self,data):
        cur=self.head
        if cur != None:
            head=Node(data)
            head.next=cur
            self.head=head
    #根据给定位置插入指定元素
    def insert_at_index(self,index,value):
        if self.head==None or self.get_length()==0:
            return
        elif index>self.get_length() or index<=0:
            print("invalid index")
            return
        elif index==1:
            self.insert_at_first(value)
        elif index==self.get_length()+1:
            self.add(value)
        else:
            cur=self.head
            pre=None
            new = Node(value)
            cursor=1
            while cur!=None:
                if index==cursor:
                    pre.next=new
                    new.next=cur
                    break
                else:
                    cursor += 1
                    pre = cur
                    cur = cur.next
    #删除指定位置的元素
    def delete_at_index(self,index):
        if self.head == None or self.get_length() == 0:
            return
        elif index>self.get_length() or index<=0:
            print("invalid index")
            return
        else:
            cur=self.head
            if index==1:
                self.head = cur.next
                return self.head
            else:
                pre = cur
                cur = cur.next
                count = 2
                while cur!=None:
                    if index == count:
                        pre.next=cur.next
                        break
                    else:
                        pre = cur
                        cur = cur.next
                        count += 1


    def IsEmpty(self):
        cur=self.head
        if cur==None:
            print("Empty linked list")
            return True
        else:
            return False
    def traverse(self):
        ptr=self.head
        while ptr != None:
            print(ptr.val)
            ptr=ptr.next

    def get_length(self):
        count=0
        if self.head==None:
            return count
        else:
            cur=self.head
            while cur:
                count += 1
                cur = cur.next
            return count
   
   #删除链表中重复的元素
   def del_duplicate(self):
        tmp=[]
        cur=self.head
        pre=None
        while cur != None:
            if cur.val in tmp:
                pre.next=cur.next
                cur=cur.next
            else:
                val = cur.val
                tmp.append(val)
                pre = cur
                cur = cur.next
    #倒转链表
    def reverse(self):
        pre=None
        cur=self.head

        while cur != None:
            next = cur.next
            cur.next=pre
            pre=cur
            cur=next
        self.head=pre
    #删除倒数第k个元素
        def del_kth_from_end(self,k):
        if k<=0 or k>self.get_length():
            print("k is invalid")
            return
        cur = self.head
        #将倒数k转为正数的index，则之后操作与delete相同
        index = self.get_length() - k + 1
        while cur != None:
            if index == 1:
                self.head = cur.next
                return self.head
            else:
                pre = cur
                cur = cur.next
                count = 2
                while cur != None:
                    if index == count:
                        pre.next = cur.next
                        break
                    else:
                        pre = cur
                        cur = cur.next
                        count += 1
    #输出链表倒数第k个元素
        def get_kth_from_end(self,k):
            if k<=0 or k>self.get_length():
                print("k is invalid")
                return
            tmp=[]
            cur=self.head
            while cur != None:
                tmp.append(cur.val)
                cur=cur.next
            return tmp[-k]
   

