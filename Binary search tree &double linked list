#二叉搜索树与双向链表
#输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
#思路：中序遍历，将结点加入列表遍历，后一节点为前一节点right，后一节点left为当前节点
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None
class Solution:
    def Convert(self, pRootOfTree):
        self.list=[]
        if not pRootOfTree:
            return
        if not pRootOfTree.left and not pRootOfTree.right:
            return pRootOfTree
        self.inOrder(pRootOfTree)
        for i in range(len(self.list)-1):
            self.list[i].right=self.list[i+1]
            self.list[i+1].left=self.list[i]
        return self.list[0]

    def inOrder(self,root):
        if not root:
            return
        self.inOrder(root.left)
        self.list.append(root)
        self.inOrder(root.right)
