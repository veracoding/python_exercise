#栈的压入、弹出序列 
#输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。
#假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
#但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
class Solution:
    def IsPopOrder(self, pushV, popV):
        # write code here
        len_a=len(pushV)
        len_b=len(popV)
        if len_a!=len_b or len_b==0:
            return False
        index_a,index_b=0,0
        tmp=[]
        while pushV:
            num=pushV[index_a]
            tmp.append(num)
            while tmp and tmp[-1]==popV[index_b]:
                    tmp.pop()
                    index_b+=1
            if index_a==len_a-1:
                if tmp:
                    return False
                else:
                    return True
            index_a+=1


#用两个栈实现队列 
#用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型
#注意当stack2不为空时push node，要先把Stack2的压回stack1
class Solution:
    def __init__(self):
        self.stack1 = []
        self.stack2 = []
    def push(self, node):
        # write code here
        if len(self.stack1)==0 and len(self.stack2)!=0:
            while self.stack2:
                self.stack1.append(self.stack2.pop())
        self.stack1.append(node)

    def pop(self):
        if len(self.stack1)==0and len(self.stack2)==0:
            return None
        if len(self.stack1)!=0 and len(self.stack2)==0:
            while self.stack1!=[]:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop()
--------------------------------------------------------------
class Solution:
    def __init__(self):
        self.stack1 = []
        self.stack2 = []
    def push(self, node):
        self.stack1.append(node)
    def pop(self):
        if self.stack2==[] and self.stack1==[]:
            return None
        if self.stack1==[] and self.stack2!=[]:
            while self.stack2:
                self.stack1.append(self.stack2.pop())
        if self.stack1 != [] and self.stack2 == []:
            while self.stack1:
                self.stack2.append(self.stack1.pop())
        return self.stack2.pop()


# 包含min函数的栈
# 题目：定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。
class Solution:
    def __init__(self):
        self.stack1=[]
        self.stack_min=[]
    def push(self, node):
        # write code here
        self.stack1.append(node)
        if self.stack_min == []:
            self.stack_min.append(node)
        if self.stack1[-1]  < self.stack_min[-1]:
            self.stack_min.append(node)
        else:
            self.stack_min.append(self.stack_min[-1])
    def pop(self):
        # write code here
        if self.stack1:
            self.stack_min.pop()
            return self.stack1.pop()
    def top(self):
        # write code here
        if self.stack1:
            return self.stack1[-1]
    def min(self):
        if self.stack_min:
            return self.stack_min[-1]
