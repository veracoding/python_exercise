#Bianry Tree
class TreeNode:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None

class BinaryTree:
    def __init__(self):
        self.root=None

    def insert(self,value):
        if self.root==None:
            self.root=TreeNode(value)
        else:
            cur=self.root
            while value < cur.data:
                if cur.left:
                    cur = cur.left
                else:
                    cur.left=TreeNode(value)


            while value > cur.data:
                if cur.right:
                    cur=cur.right
                else:
                    cur.right=TreeNode(value)

    def print_tree_in_order(self,root):
        self.root=root
        if root:
            self.print_tree_in_order(root.left)
            print(root.data)
            self.print_tree_in_order(root.right)
    def print_tree_pre_order(self,root):
        self.root=root
        if root:
            print(root.data)
            self.print_tree_pre_order(root.left)
            self.print_tree_pre_order(root.right)
------------------------------------------------------------------
#二叉树的下一个结点
#给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。
#思路： 1，若给定节点为空，返回
#2，若给定节点存在右子树，则右子树的左节点指针遍历找到的叶子结点为下一个节点
#3. 给定节点不存在右子树： a,给定结点为其父节点的左孩子，下一个节点为其父节点 b，给定节点为其父节点右孩子，则指针指向父节点的父节点遍历直到当前节点为其父节点的左，返回其父节点
class Tree：
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.next = None

class Solution:
    def GetNext(self, node):
        # write code here
        if node == None:
            return
        if node.right:
            node = node.right
            while node.left:
                node = node.left
            return node
        else:
            if node.next == None:
                return
            if node == node.next.left:
                return node.next
            else:
                if node == node.next.right:
                    if node.next == node.next.next.left:
                        return node.next.next
                    else:
                        return
                        

-------------------------------------------------------------------------
#重建二叉树
#输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
#假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，
#则重建二叉树并返回
class Solution:
    # 返回构造的TreeNode根节点
    def reConstructBinaryTree(self, pre, tin):
        if not pre or not tin:
            return None
        root=TreeNode(pre[0])
        root_index=tin.index(pre[0])

        root.left=self.reConstructBinaryTree(pre[1:root_index+1],tin[:root_index])
        root.right=self.reConstructBinaryTree(pre[root_index+1:],tin[root_index+1:])
        return root
-------------------------------------------------------------------------
#对称的二叉树
#请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
#递归方法 先判断根节点 如果为空 返回true
#左右子树对称即相同 ， 问题变为判断两个树是否相同 -->左子树右子树不存在 true ；左子树右子树根节点相同，左子树遍历根节点》左子树》右子树；
#右子树遍历根节点》右子树》左子树 递归   ；其他 false
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
class Solution:
    def isSymmetrical(self, pRoot):
        # write code here

        def is_the_same(left_tree,right_tree):
            if not left_tree and not right_tree:
                return True
            if left_tree and right_tree and left_tree.val==right_tree.val:
                l=is_the_same(left_tree.left,right_tree.right)
                r=is_the_same(left_tree.right,right_tree.left)
                return l and r
            else:
                return False
        if not pRoot:
            return True
        else:
            return is_the_same(pRoot.left,pRoot.right)
            
------------------------------------------------------------------------------
##从上往下打印出二叉树的每个节点，同层节点从左至右打印。
#思路：两个列表 一个用作队列弹出先加入的节点 第二个存每个结点的值
#将新节点插入列表顺序打印
class TreeNode:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None

class Solution:
    def print_in_order(self,root):
        stack1=[root]
        stack2=[]
        if not root:
            return None
        while stack1:
            pnode=stack1.pop(0)
            stack2.append(pnode.data)
            if pnode.left!=None:
                stack1.append(pnode.left)
            if pnode.right!=None:
                stack1.append(pnode.right)
        return stack2
   
 #按之字形顺序打印二叉树
 #请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推
 #定义一个标记奇偶数行，新建一个列表加入每层节点，偶数行则将列表倒叙插入结果
    def zigzag_print(self,proot):
        array=[]
        result=[]
        if not proot:
            return None
        array.append(proot)
        flag=False
        while array:
            curnode = []
            curres = []
            for node in array:
                if node.left:
                    curnode.append(node.left)
                if node.right:
                    curnode.append(node.right)
                curres.append(node.data)
            if flag == False:
                result.append(curres)
                flag=True
            else:
                result.append(curres[::-1])
                flag=False
            array=curnode
        return result
        
        
        
#把二叉树打印成多行
#从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。
    def print(self, proot):
        array = []
        result = []
        if not proot:
            return array
        array.append(proot)

        while array:
            curnode = []
            curres = []
            for node in array:
                if node.left:
                    curnode.append(node.left)
                if node.right:
                    curnode.append(node.right)
                curres.append(node.data)

            result.append(curres)
            array = curnode
        return result

#二叉树的深度
 class Solution:
    def TreeDepth(self, pRoot):
        d = 0
        if not pRoot:
            return d
        if pRoot:
            dleft=self.TreeDepth(pRoot.left)
            dright=self.TreeDepth(pRoot.right)

            return max(dleft,dright)+1

#非递归
class Solution:
    def TreeDepth(self, pRoot):
        d = 0
        if not pRoot:
            return d
        if pRoot:
            d+=1
            cur=pRoot
            while cur:
                if not cur.left and not cur.right:
                    break
                else:
                    if cur.left and not cur.right:
                        cur=cur.left
                    if cur.right and not cur.left:
                        cur=cur.right
                    if cur.left and cur.right:
                        if cur.left.left:
                            cur=cur.left
                        else:
                            cur=cur.right
                    d+=1
            return d
            
#平衡二叉树
　　平衡二叉查找树：简称平衡二叉树。也称为AVL树。它具有如下几个性质：
    可以是空树。
    假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过1
    （调用树深度函数）
class Solution: 
   def TreeDepth(self, pRoot):
        d = 0
        if not pRoot:
            return d
        if pRoot:
            dleft=self.TreeDepth(pRoot.left)
            dright=self.TreeDepth(pRoot.right)
            return max(dleft,dright)+1

    def IsBalanced_Solution(self, pRoot):
        if not pRoot:
            return True
        if pRoot:
            l_left=self.TreeDepth(pRoot.left)
            l_right=self.TreeDepth(pRoot.right)
            if abs(l_left-l_right)>1:
                return False
            return self.IsBalanced_Solution(pRoot.left) and self.IsBalanced_Solution(pRoot.right)


#树的子结构
#输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）
#两个递归：先判断两个根节点是否相等，如果相等，递归再判断其左右子树和另一个左右子树，出口为B先为空则True,A先空为False,A,B结点值不等False;
#如果A,B结点不等，再递归A的左子树与B比较，不同再右子树
class Solution:
    def HasSubtree(self, pRoot1, pRoot2):
        res = False
        if pRoot1 and pRoot2:
            if pRoot1.val == pRoot2.val:
                res = self.is_subTree(pRoot1,pRoot2)
            if res is False:
                res = self.HasSubtree(pRoot1.left,pRoot2)
            if res is False:
                res = self.HasSubtree(pRoot1.right,pRoot2)
        return res
    def is_subTree(self,pRoot1,pRoot2):
        if pRoot2 == None:
            return True
        if pRoot1 == None:
            return False
        if pRoot1.val != pRoot2.val:
            return False
        return self.is_subTree(pRoot1.left,pRoot2.left) and self.is_subTree(pRoot1.right,pRoot2.right)

#二叉搜索树的后续遍历序列
#思路：序列的最后一个为根节点，左子树都小于根节点，右子树都大于根节点，左右子树分别递归
class Solution:
    def VerifySquenceOfBST(self, sequence):
        l = len(sequence)
        if l == 0:
            return False
        root = sequence[-1]
        i=0
        for j in range(l):
            if sequence[j] < root:
                i+=1
            if sequence[j] > root:
                break

        for j in range(i,l-1):
            if sequence[j] < root:
                return False
        left=True
        if i>1:
            left = self.VerifySquenceOfBST(sequence[:i])
        right=True
        if i<l-2 and left is True:
            right = self.VerifySquenceOfBST(sequence[i:l-1])
        return left and right
